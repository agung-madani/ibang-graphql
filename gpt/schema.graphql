type Mutation {
  createCar(input: CreateCarInput!): Car!
  updateCar(id: ID!, input: UpdateCarInput!): Car!
  deleteCar(id: ID!): Car
  createSupplier(input: CreateSupplierInput!): CarSupplierCompanyInfo!
  createCompany(input: CreateCompanyInput!): Company!
  updateCompany(id: ID!, input: UpdateCompanyInput!): Company!
  updateSupplier(id: ID!, input: UpdateSupplierInput!): CarSupplierCompanyInfo!
  deleteCompany(id: ID!): Company
  createCustomer(input: CreateCustomerInput!): Customer!
  updateCustomer(id: ID!, input: UpdateCustomerInput!): Customer!
  deleteCustomer(id: ID!): Customer
}

input CreateCarInput {
  model: String!
  year: Int!
  price: Float!
  description: String
  companyId: ID!
  createdAt: String
}

input UpdateCarInput {
  model: String
  year: Int
  price: Float
  description: String
  companyId: ID
  createdAt: String
}

input CreateCompanyInput {
  name: String!
  description: String
}

input UpdateCompanyInput {
  name: String
  description: String
}

input CreateSupplierInput {
  car_id: ID!
  availability: Boolean!
  quantity: Int!
}

input UpdateSupplierInput {
  car_id: ID!
  availability: Boolean!
  quantity: Int!
}

input CreateCustomerInput {
  name: String!
  email: String!
  phone: String
}

input UpdateCustomerInput {
  name: String
  email: String
  phone: String
}



type Query {
  cars: [Car]
  car(id: ID!): Car
  carSupplierCompanyInfo(car_id: ID!): CarSupplierCompanyInfo
  companies: [Company]
  company(id: ID!): Company
  customers: [Customer]
  customer(id: ID!): Customer
}

type Company {
  id: ID!
  name: String!
  description: String
}

"""
Represents a car being sold by dealers
"""
type Car {
  id: ID!
  model: String
  year: Int
  price: Float
  description: String
  createdAt: String
  company: Company
  supplier: CarSupplierCompanyInfo
  customer: Customer

}


type CarSupplierCompanyInfo {
  id: ID!
  car_id: String
  car: Car
  availability: Boolean
  quantity: Int
}

type Customer {
  id: ID!
  name: String!
  email: String!
  phone: String
}
